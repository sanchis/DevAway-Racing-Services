{"version":3,"sources":["data/karts.utils.js","config.js","hooks/useLazyLoadElement.js","components/pilot/index.jsx","pages/ranking.jsx","components/race/index.jsx","pages/pilot-races.jsx","pages/races.jsx","components/navbar/index.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["getRankingByRace","raceName","drivers","map","drv","races","pilot","race","find","name","getPilotRace","sort","driver1","driver2","time1","time","time2","moment","diff","getRankingByPilot","pilotName","driver","getGlobalRanking","ranking","Map","getRaces","forEach","positions","position","valuePilot","get","set","Array","from","keys","raceNumber","useLazyLoadElement","useState","display","setDisplay","elementRef","useRef","useEffect","observer","IntersectionObserver","entries","isIntersecting","disconnect","rootMargin","observe","current","Pilot","ref","className","Item","renderAs","size","alt","src","picture","age","team","pilots","Ranking","Race","hightLightPilot","title","React","memo","PilotRaces","renderRaces","index","Races","Navbar","isActive","setIsActive","active","color","Brand","href","Burger","onClick","Menu","Container","to","exact","activeClassName","App","console","log","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55aa174c.chunk.js","sourcesContent":["import drivers from './data.json';\r\nimport moment from 'moment'\r\nimport { RACES_COUNT } from '../config';\r\n\r\n/**\r\n * Get data form pilot name\r\n * @param {*} name \r\n */\r\nexport function getPilot(name) {\r\n    return drivers.find(driver => driver.name === name);\r\n}\r\n\r\n/**\r\n * Get Ranking by race name\r\n * @param {*} raceName \r\n */\r\nexport function getRankingByRace(raceName) {\r\n    const raceDrivers = drivers.map(drv => {\r\n        const { races, ...pilot } = drv;\r\n        pilot.race = getPilotRace(drv, raceName);\r\n        return pilot\r\n    });\r\n    const resultDrivers = raceDrivers.sort((driver1, driver2) =>\r\n        sortTime(driver1.race.time, driver2.race.time)\r\n    )\r\n    return resultDrivers;\r\n}\r\n\r\n/**\r\n * Get ranking by pilot name\r\n * @param {*} pilotName \r\n */\r\nexport function getRankingByPilot(pilotName) {\r\n    const pilot = getPilot(pilotName);\r\n    const races = pilot.races.map(race => getRankingByRace(race.name));\r\n    return { pilot, races };\r\n}\r\n\r\n/**\r\n * Get specific race from pilot\r\n * @param {*} pilot \r\n * @param {*} raceName \r\n */\r\nexport function getPilotRace(pilot, raceName) {\r\n    return pilot.races.find(race => race.name === raceName);\r\n}\r\n\r\n/**\r\n *  Get global ranking from championship\r\n */\r\nexport function getGlobalRanking() {\r\n    const ranking = new Map();\r\n    getRaces().forEach((positions) => {\r\n        /** For every race set the pilot and position */\r\n        positions.forEach((pilot, position) => {\r\n            const valuePilot = ranking.get(pilot.name)?.position || 0;\r\n            ranking.set(pilot.name, { pilot, position: (valuePilot + position) });\r\n        });\r\n    })\r\n\r\n    /** Sort all the positions for all the races */\r\n    return Array.from(ranking, ([name, pilot]) => (pilot))\r\n        .sort((driver1, driver2) => driver1.position - driver2.position)\r\n        .map(ranking => ranking.pilot);\r\n}\r\n\r\n/**\r\n * Get all races championship\r\n */\r\nexport function getRaces() {\r\n    /** Create empty array with number of races */\r\n    return [...Array(RACES_COUNT).keys()].map(raceNumber =>\r\n        getRankingByRace(`Race ${raceNumber}`)\r\n    );\r\n}\r\n\r\n/**\r\n * Sort timing \r\n * @param {*} time1 \r\n * @param {*} time2 \r\n */\r\nfunction sortTime(time1, time2) {\r\n    return moment(time1, 'h:mm:ss:SSS').diff(moment(time2, 'h:mm:ss:SSS'))\r\n}\r\n","export const RACES_COUNT = 9;","import { useState, useRef, useEffect } from 'react'\r\n\r\n\r\nexport default function useLazyLoadElement() {\r\n    const [display, setDisplay] = useState(false);\r\n    const elementRef = useRef();\r\n\r\n\r\n    useEffect(() => {\r\n        const onChangeObserver = (entries) => {\r\n            const el = entries[0];\r\n            if (el.isIntersecting) {\r\n                setDisplay(true);\r\n                observer.disconnect();\r\n            }\r\n        };\r\n\r\n        const observer = new IntersectionObserver(onChangeObserver, {\r\n            rootMargin: '20px'\r\n        });\r\n\r\n        observer.observe(elementRef.current);\r\n        return () => observer.disconnect();\r\n\r\n    }, []);\r\n    return { display, elementRef };\r\n}\r\n","import { Box, Media, Image, Content } from 'react-bulma-components'\r\nimport './styles.css';\r\nimport useLazyLoadElement from 'hooks/useLazyLoadElement';\r\n\r\nexport default function Pilot({ pilot, position }) {\r\n    const { display, elementRef } = useLazyLoadElement()\r\n    return (\r\n        <div ref={elementRef} className=\"pilot\">\r\n            {display ?\r\n                <Box>\r\n                    <Media>\r\n                        <h2 className=\"is-size-2 position\">{position}</h2>\r\n                        <Media.Item renderAs=\"figure\" position=\"left\">\r\n                            <Image size={64} alt=\"64x64\" src={pilot.picture} />\r\n                        </Media.Item>\r\n                        <Media.Item>\r\n                            <Content>\r\n                                <p>\r\n                                    <strong>{pilot.name}</strong> <small>Age: {pilot.age}</small>\r\n                                    <br />\r\n                            Team: {pilot.team}\r\n                                </p>\r\n                            </Content>\r\n                        </Media.Item>\r\n                    </Media >\r\n                </Box >\r\n                : null}\r\n        </div>\r\n    );\r\n}","import Pilot from \"components/pilot\";\r\nimport { getGlobalRanking } from \"data/karts.utils\";\r\n\r\n\r\nconst pilots = getGlobalRanking();\r\nexport default function Ranking() {\r\n    return (\r\n        <>\r\n            <h1 className=\"is-size-1\">Global Ranking</h1>\r\n            {pilots.map((pilot, position) => <Pilot key={pilot.name} position={position + 1} pilot={pilot} ></Pilot>)}\r\n        </>\r\n    );\r\n}","import useLazyLoadElement from 'hooks/useLazyLoadElement';\r\nimport { Table } from 'react-bulma-components'\r\nimport React from 'react';\r\nimport './styles.css'\r\n\r\nfunction Race({ race, name, hightLightPilot }) {\r\n    const { display, elementRef } = useLazyLoadElement();\r\n\r\n    return (\r\n        <div ref={elementRef} className=\"race-pilots\">\r\n            {display ?\r\n                <>\r\n                    <h2 className=\"is-size-2\">{name}</h2>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th><abbr title=\"Position\">Position</abbr></th>\r\n                                <th><abbr title=\"Points\">Time</abbr></th>\r\n                                <th><abbr title=\"Name\">Name</abbr></th>\r\n                                <th><abbr title=\"Team\">Team</abbr></th>\r\n                                <th><abbr title=\"Age\">Age</abbr></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {race.map((pilot, position) =>\r\n                                <tr key={position} className={pilot.name === hightLightPilot ? 'is-selected' : ''}>\r\n                                    <th>{position + 1}</th>\r\n                                    <th>{pilot.race.time}</th>\r\n                                    <th>{pilot.name}</th>\r\n                                    <th>{pilot.team}</th>\r\n                                    <th>{pilot.age}</th>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n                : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Race);","import Pilot from \"components/pilot\";\r\nimport { getRankingByPilot, getGlobalRanking } from \"data/karts.utils\";\r\nimport Race from 'components/race'\r\n\r\n\r\nconst pilots = getGlobalRanking();\r\nexport default function PilotRaces() {\r\n\r\n    const renderRaces = (pilot) =>\r\n        getRankingByPilot(pilot.name).races.map((race, index) =>\r\n            <Race name={`Race ${index + 1}`} key={pilot.name + index} race={race} hightLightPilot={pilot.name} ></Race>\r\n        );\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"is-size-1\">Pilot Ranking</h1>\r\n            {pilots.map((pilot, position) =>\r\n                <div key={pilot.name + position}>\r\n                    <Pilot position={position + 1} pilot={pilot} ></Pilot>\r\n                    {renderRaces(pilot)}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}","import { getRaces } from \"data/karts.utils\";\r\nimport Race from 'components/race'\r\n\r\nconst races = getRaces();\r\nexport default function Races() {\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"is-size-1\">Races</h1>\r\n            {races.map((race, raceNumber) =>\r\n                <Race race={race} name={`Race ${raceNumber + 1}`}></Race>\r\n            )}\r\n        </>\r\n    );\r\n}","import { Navbar as BulmaNavbar } from 'react-bulma-components';\r\nimport React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './styles.css';\r\n\r\nexport default function Navbar() {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n\r\n    return (\r\n        <BulmaNavbar\r\n            active={isActive}\r\n            color=\"primary\">\r\n            <BulmaNavbar.Brand>\r\n                <BulmaNavbar.Item renderAs=\"a\" href=\"#\" className=\"brand\" >\r\n                    DevAway Racing Services\r\n                </BulmaNavbar.Item>\r\n                <BulmaNavbar.Burger onClick={() => setIsActive(!isActive)} />\r\n            </BulmaNavbar.Brand>\r\n            <BulmaNavbar.Menu >\r\n                <BulmaNavbar.Container>\r\n                    <NavLink className=\"navbar-item\" to=\"/\" exact activeClassName=\"is-active\">Global Ranking</NavLink>\r\n                    <NavLink className=\"navbar-item\" to=\"/pilot-races\" activeClassName=\"is-active\">Pilot Races</NavLink>\r\n                    <NavLink className=\"navbar-item\" to=\"/races\" activeClassName=\"is-active\">Races</NavLink>\r\n                </BulmaNavbar.Container>\r\n            </BulmaNavbar.Menu>\r\n        </BulmaNavbar>\r\n    );\r\n}","import './App.css';\r\nimport { getRankingByPilot, getRankingByRace, getGlobalRanking } from './data/karts.utils';\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\nimport Ranking from 'pages/ranking'\r\nimport PilotRaces from 'pages/pilot-races'\r\nimport Races from 'pages/races'\r\n\r\nimport Navbar from 'components/navbar';\r\nimport { Container, Section } from 'react-bulma-components'\r\n\r\nfunction App() {\r\n\r\n    console.log('getRankingByRace', getRankingByRace('Race 0'));\r\n    console.log('getRankingByPilot', getRankingByPilot('Daniels Manning'));\r\n    console.log('getGlobalRanking', getGlobalRanking());\r\n\r\n    return (\r\n        <>\r\n            <BrowserRouter>\r\n                <Navbar></Navbar>\r\n                <Section>\r\n                    <Container>\r\n                        <Switch>\r\n                            <Route\r\n                                exact\r\n                                path=\"/\">\r\n                                <Ranking></Ranking>\r\n                            </Route>\r\n                            <Route\r\n                                exact\r\n                                path=\"/pilot-races\" >\r\n                                <PilotRaces></PilotRaces>\r\n                            </Route>\r\n                            <Route\r\n                                exact\r\n                                path=\"/races\"\r\n                                render={() => <Races />} />\r\n                        </Switch>\r\n                    </Container>\r\n                </Section>\r\n            </BrowserRouter>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}