{"version":3,"sources":["hooks/useLazyLoadElement.js","components/pilot/index.jsx","data/karts.utils.js","config.js","pages/ranking.jsx","components/race/index.jsx","pages/pilot-races.jsx","pages/races.jsx","components/navbar/index.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["useLazyLoadElement","useState","display","setDisplay","elementRef","useRef","useEffect","observer","IntersectionObserver","entries","isIntersecting","disconnect","rootMargin","observe","current","Pilot","pilot","position","ref","className","Item","renderAs","size","alt","src","picture","name","age","team","getRankingByRace","raceName","drivers","map","drv","races","race","find","getPilotRace","sort","driver1","driver2","time1","time","time2","moment","diff","getRankingByPilot","id","_id","driver","getGlobalRanking","ranking","Map","getRaces","forEach","positions","valuePilot","get","set","Array","from","keys","raceNumber","pilots","Ranking","Race","hightLightPilot","title","React","memo","PilotRaces","renderRaces","index","Races","Navbar","isActive","setIsActive","active","color","Brand","href","Burger","onClick","Menu","Container","to","exact","activeClassName","App","basename","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.573173de.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react'\r\n\r\n\r\nexport default function useLazyLoadElement() {\r\n    const [display, setDisplay] = useState(false);\r\n    const elementRef = useRef();\r\n\r\n\r\n    useEffect(() => {\r\n        const onChangeObserver = (entries) => {\r\n            const el = entries[0];\r\n            if (el.isIntersecting) {\r\n                setDisplay(true);\r\n                observer.disconnect();\r\n            }\r\n        };\r\n\r\n        const observer = new IntersectionObserver(onChangeObserver, {\r\n            rootMargin: '20px'\r\n        });\r\n\r\n        observer.observe(elementRef.current);\r\n        return () => observer.disconnect();\r\n\r\n    }, []);\r\n    return { display, elementRef };\r\n}\r\n","import { Box, Media, Image, Content } from 'react-bulma-components'\r\nimport './styles.css';\r\nimport useLazyLoadElement from 'hooks/useLazyLoadElement';\r\n\r\nexport default function Pilot({ pilot, position }) {\r\n    const { display, elementRef } = useLazyLoadElement()\r\n    return (\r\n        <div ref={elementRef} className=\"pilot\">\r\n            {display ?\r\n                <Box>\r\n                    <Media>\r\n                        <h2 className=\"is-size-2 position\">{position}</h2>\r\n                        <Media.Item renderAs=\"figure\" position=\"left\">\r\n                            <Image size={64} alt=\"64x64\" src={pilot.picture} />\r\n                        </Media.Item>\r\n                        <Media.Item>\r\n                            <Content>\r\n                                <p>\r\n                                    <strong>{pilot.name}</strong> <small>Age: {pilot.age}</small>\r\n                                    <br />\r\n                            Team: {pilot.team}\r\n                                </p>\r\n                            </Content>\r\n                        </Media.Item>\r\n                    </Media >\r\n                </Box >\r\n                : null}\r\n        </div>\r\n    );\r\n}","import drivers from './data.json';\r\nimport moment from 'moment'\r\nimport { RACES_COUNT } from '../config';\r\n\r\n/**\r\n * Get data form pilot name\r\n * @param {*} id \r\n */\r\nexport function getPilot(_id) {\r\n    return drivers.find(driver => driver._id === _id);\r\n}\r\n\r\n/**\r\n * Get Ranking by race name\r\n * @param {*} raceName \r\n */\r\nexport function getRankingByRace(raceName) {\r\n    const raceDrivers = drivers.map(drv => {\r\n        const { races, ...pilot } = drv;\r\n        pilot.race = getPilotRace(drv, raceName);\r\n        return pilot\r\n    });\r\n    const resultDrivers = raceDrivers.sort((driver1, driver2) =>\r\n        sortTime(driver1.race.time, driver2.race.time)\r\n    )\r\n    return resultDrivers;\r\n}\r\n\r\n/**\r\n * Get ranking by pilot name\r\n * @param {*} id \r\n */\r\nexport function getRankingByPilot(id) {\r\n    const pilot = getPilot(id);\r\n    const races = pilot.races.map(race => getRankingByRace(race.name));\r\n    return { pilot, races };\r\n}\r\n\r\n/**\r\n * Get specific race from pilot\r\n * @param {*} pilot \r\n * @param {*} raceName \r\n */\r\nexport function getPilotRace(pilot, raceName) {\r\n    return pilot.races.find(race => race.name === raceName);\r\n}\r\n\r\n/**\r\n *  Get global ranking from championship\r\n */\r\nexport function getGlobalRanking() {\r\n    const ranking = new Map();\r\n    getRaces().forEach((positions) => {\r\n        /** For every race set the pilot and position */\r\n        positions.forEach((pilot, position) => {\r\n            const valuePilot = ranking.get(pilot._id)?.position || 0;\r\n            ranking.set(pilot._id, { pilot, position: (valuePilot + position) });\r\n        });\r\n    })\r\n\r\n    /** Sort all the positions for all the races */\r\n    return Array.from(ranking, ([name, pilot]) => (pilot))\r\n        .sort((driver1, driver2) => driver1.position - driver2.position)\r\n        .map(ranking => ranking.pilot);\r\n}\r\n\r\n/**\r\n * Get all races championship\r\n */\r\nexport function getRaces() {\r\n    /** Create empty array with number of races */\r\n    return [...Array(RACES_COUNT).keys()].map(raceNumber =>\r\n        getRankingByRace(`Race ${raceNumber}`)\r\n    );\r\n}\r\n\r\n/**\r\n * Sort timing \r\n * @param {*} time1 \r\n * @param {*} time2 \r\n */\r\nfunction sortTime(time1, time2) {\r\n    return moment(time1, 'h:mm:ss:SSS').diff(moment(time2, 'h:mm:ss:SSS'))\r\n}\r\n","export const RACES_COUNT = 9;","import Pilot from \"components/pilot\";\r\nimport { getGlobalRanking } from \"data/karts.utils\";\r\n\r\n\r\nconst pilots = getGlobalRanking();\r\nexport default function Ranking() {\r\n    return (\r\n        <>\r\n            <h1 className=\"is-size-1\">Global Ranking</h1>\r\n            {pilots.map((pilot, position) => <Pilot key={pilot.name} position={position + 1} pilot={pilot} ></Pilot>)}\r\n        </>\r\n    );\r\n}","import useLazyLoadElement from 'hooks/useLazyLoadElement';\r\nimport { Table } from 'react-bulma-components'\r\nimport React from 'react';\r\nimport './styles.css'\r\n\r\nfunction Race({ race, name, hightLightPilot }) {\r\n    const { display, elementRef } = useLazyLoadElement();\r\n\r\n    return (\r\n        <div ref={elementRef} className=\"race-pilots\">\r\n            {display ?\r\n                <>\r\n                    <h2 className=\"is-size-2\">{name}</h2>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th><abbr title=\"Position\">Position</abbr></th>\r\n                                <th><abbr title=\"Points\">Time</abbr></th>\r\n                                <th><abbr title=\"Name\">Name</abbr></th>\r\n                                <th><abbr title=\"Team\">Team</abbr></th>\r\n                                <th><abbr title=\"Age\">Age</abbr></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {race.map((pilot, position) =>\r\n                                <tr key={position} className={pilot.name === hightLightPilot ? 'is-selected' : ''}>\r\n                                    <th>{position + 1}</th>\r\n                                    <th>{pilot.race.time}</th>\r\n                                    <th>{pilot.name}</th>\r\n                                    <th>{pilot.team}</th>\r\n                                    <th>{pilot.age}</th>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n                : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Race);","import Pilot from \"components/pilot\";\r\nimport { getRankingByPilot, getGlobalRanking } from \"data/karts.utils\";\r\nimport Race from 'components/race'\r\n\r\n\r\nconst pilots = getGlobalRanking();\r\nexport default function PilotRaces() {\r\n\r\n    const renderRaces = (pilot) =>\r\n        getRankingByPilot(pilot._id).races.map((race, index) =>\r\n            <Race name={`Race ${index + 1}`} key={pilot.name + index} race={race} hightLightPilot={pilot.name} ></Race>\r\n        );\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"is-size-1\">Pilot Ranking</h1>\r\n            {pilots.map((pilot, position) =>\r\n                <div key={pilot._id + position}>\r\n                    <Pilot position={position + 1} pilot={pilot} ></Pilot>\r\n                    {renderRaces(pilot)}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}","import { getRaces } from \"data/karts.utils\";\r\nimport Race from 'components/race'\r\n\r\nconst races = getRaces();\r\nexport default function Races() {\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"is-size-1\">Races</h1>\r\n            {races.map((race, raceNumber) =>\r\n                <Race race={race} name={`Race ${raceNumber + 1}`}></Race>\r\n            )}\r\n        </>\r\n    );\r\n}","import { Navbar as BulmaNavbar } from 'react-bulma-components';\r\nimport React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './styles.css';\r\n\r\nexport default function Navbar() {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n\r\n    return (\r\n        <BulmaNavbar\r\n            active={isActive}\r\n            color=\"primary\">\r\n            <BulmaNavbar.Brand>\r\n                <BulmaNavbar.Item renderAs=\"a\" href=\"#\" className=\"brand\" >\r\n                    DevAway Racing Services\r\n                </BulmaNavbar.Item>\r\n                <BulmaNavbar.Burger onClick={() => setIsActive(!isActive)} />\r\n            </BulmaNavbar.Brand>\r\n            <BulmaNavbar.Menu >\r\n                <BulmaNavbar.Container>\r\n                    <NavLink className=\"navbar-item\" to=\"/\" exact activeClassName=\"is-active\">Global Ranking</NavLink>\r\n                    <NavLink className=\"navbar-item\" to=\"/pilot-races\" activeClassName=\"is-active\">Pilot Races</NavLink>\r\n                    <NavLink className=\"navbar-item\" to=\"/races\" activeClassName=\"is-active\">Races</NavLink>\r\n                </BulmaNavbar.Container>\r\n            </BulmaNavbar.Menu>\r\n        </BulmaNavbar>\r\n    );\r\n}","import './App.css';\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\nimport Ranking from 'pages/ranking'\r\nimport PilotRaces from 'pages/pilot-races'\r\nimport Races from 'pages/races'\r\n\r\nimport Navbar from 'components/navbar';\r\nimport { Container, Section } from 'react-bulma-components'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <BrowserRouter basename=\"/DevAway-Racing-Services\">\r\n        <Navbar></Navbar>\r\n        <Section>\r\n          <Container>\r\n            <Switch>\r\n              <Route\r\n                exact\r\n                path=\"/\">\r\n                <Ranking></Ranking>\r\n              </Route>\r\n              <Route\r\n                exact\r\n                path=\"/pilot-races\" >\r\n                <PilotRaces></PilotRaces>\r\n              </Route>\r\n              <Route\r\n                exact\r\n                path=\"/races\"\r\n                render={() => <Races />} />\r\n            </Switch>\r\n          </Container>\r\n        </Section>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}